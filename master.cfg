# -*- python -*-
# ex: set filetype=python:

from future.utils import iteritems
from future.utils import string_types
from buildbot.plugins import *
from buildbot.process import logobserver
from buildbot import locks
from buildbot.www.hooks.github import GitHubEventHandler

import buildbot
import datetime

from liribotcfg import configuration
from liribotcfg import factories

config = configuration.Configuration()

is_archlinux_enabled = False

###### Initialization

c = BuildmasterConfig = {}
c['change_source'] = []
c['protocols'] = {}
c['workers'] = []
c['schedulers'] = []
c['builders'] = []
c['services'] = []
c['buildbotNetUsageData'] = None
c['collapseRequests'] = True

####### Authentication

auth = None
allow_rules = []
role_matchers = []
admins_role = 'admins'

if config.admin_username != '' and config.admin_password != '':
    auth = util.UserPasswordAuth({config.admin_username: config.admin_password})
    role_matchers.append(util.RolesFromEmails(admins=[config.admin_username]))
elif config.github_auth_client != '' and config.github_auth_secret != '':
    auth = util.GitHubAuth(config.github_auth_client, config.github_auth_secret)
    admins_role = 'lirios'
    role_matchers.append(util.RolesFromGroups())

authz = util.Authz(
    allowRules=[
        util.RebuildBuildEndpointMatcher(role=admins_role, defaultDeny=True),
        util.StopBuildEndpointMatcher(role=admins_role, defaultDeny=True),
        util.ForceBuildEndpointMatcher(role=admins_role, defaultDeny=True),
        util.EnableSchedulerEndpointMatcher(role=admins_role, defaultDeny=True)
    ],
    roleMatchers=role_matchers
)

c['protocols']['pb'] = {'port': 9989}

####### Setup

# configure a janitor which will delete all logs older than one month,
# and will run on sundays at noon
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=datetime.timedelta(weeks=4),
    hour=12,
    dayOfWeek=6
)]

####### Workers

workers = {'local': [], 'archlinux': [], 'fedora': []}

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

# For whatever reason, max-builds doesn't seem to work, so we only ever run one build.
# To hack around this we create multiple master workers
for i in range(1, config.num_master_workers + 1):
    name = 'MasterWorker%d' % i
    c['workers'].append(worker.LocalWorker(name))
    workers['local'].append(name)

# Remote workers
for worker_name, worker_dict in config.workers.iteritems():
    if worker_dict.get('enabled', True) is False:
        continue
    c['workers'].append(
        worker.Worker(
            worker_name, worker_dict.get('password'),
            max_builds=worker_dict.get('max-builds', 2)
        )
    )

# Docker workers
# for hostconfig see https://docker-py.readthedocs.io/en/stable/api.html#docker.api.container.ContainerApiMixin.create_host_config
for worker_basename, worker_dict in config.docker_workers.iteritems():
    for i in range(1, worker_dict.get('instances', 1) + 1):
        if worker_dict.get('enabled', True) is False:
            continue
        worker_name = worker_basename + str(i)
        volumes = []
        for volume in worker_dict.get('volumes', []):
            volumes.append(volume % {'worker_name': worker_name})
        w = worker.DockerLatentWorker(
            worker_name, None,
            keepalive_interval=60*60,
            missing_timeout=30*60,
            max_builds=1,
            docker_host=worker_dict.get('host', 'unix://var/run/docker.sock'),
            image=worker_dict['image'],
            followStartupLogs=True,
            autopull=True,
            alwaysPull=True,
            volumes=volumes,
            hostconfig=worker_dict.get('hostconfig', {})
        )
        if 'class' in worker_dict:
            workers[worker_dict['class']].append(worker_name)
        c['workers'].append(w)

####### Codebases

all_repositories = {
    r'https://github.com/lirios/packages.git': 'packages',
    r'https://github.com/lirios/archbuild.git': 'archbuild',
    r'https://github.com/lirios/kickstart.git': 'kickstart',
    r'https://github.com/lirios/ostree-config.git': 'ostree-config',
    r'https://github.com/lirios/flatpak.git': 'flatpak',
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### Schedulers

# update-docker

c['schedulers'].append(
    schedulers.Periodic(
        name='update-docker',
        reason='Perioding rebuild of the CI container images',
        builderNames=['update-docker'],
        periodicBuildTimer=2*24*60*60,
    )
)
c['schedulers'].append(
    schedulers.ForceScheduler(
        name='update-docker-force',
        buttonName='Force Rebuild',
        label='Force a rebuild',
        reason=util.StringParameter(
            name='reason',
            label='Reason:',
            required=True,
            default='Forced build',
            size=80,
        ),
        properties=[
            util.StringParameter(
                name='buildname',
                label='Build Name:',
                required=False,
            ),
        ],
        builderNames=['update-docker'],
    )
)

# archlinux

if is_archlinux_enabled is True:
    c['schedulers'].append(
        schedulers.SingleBranchScheduler(
            name='archlinux-checkin',
            treeStableTimer=5*60,
            change_filter=util.ChangeFilter(branch='master', project='archlinux', category='packages', codebase='packages'),
            builderNames=['archlinux-build'],
        )
    )
    c['schedulers'].append(
        schedulers.Nightly(
            name='archlinux-nightly',
            reason='Nightly build of the Arch Linux packages',
            codebases=[
                util.CodebaseParameter(
                    codebase='packages',
                    label='Repository packages',
                    branch=util.FixedParameter(name='branch', default='master'),
                    repository=util.FixedParameter(name='repository', default='https://github.com/lirios/packages.git'),
                    revision=util.FixedParameter(name='revision', default=''),
                    project=util.FixedParameter(name='project', default='archlinux'),
                    category=util.FixedParameter(name='category', default='packages'),
                )
            ],
            builderNames=['archlinux-build'],
            hour=2, minute=0
        )
    )
    c['schedulers'].append(
        schedulers.ForceScheduler(
            name='archlinux-force',
            buttonName='Force Rebuild',
            label='Force a rebuild',
            reason=util.StringParameter(
                name='reason',
                label='Reason:',
                required=True,
                default='Forced build',
                size=80,
            ),
            properties=[
                util.StringParameter(
                    name='buildname',
                    label='Build Name:',
                    required=False,
                ),
            ],
            codebases=[
                util.CodebaseParameter(
                    codebase='packages',
                    label='Repository packages',
                    branch=util.FixedParameter(name='branch', default='master'),
                    repository=util.FixedParameter(name='repository', default='https://github.com/lirios/packages.git'),
                    revision=util.FixedParameter(name='revision', default=''),
                    project=util.FixedParameter(name='project', default='archlinux'),
                    category=util.FixedParameter(name='category', default='packages'),
                )
            ],
            builderNames=['archlinux-build'],
        )
    )
    
    # archlinux-iso

    c['schedulers'].append(
        schedulers.SingleBranchScheduler(
            name='archlinux-iso-checkin',
            treeStableTimer=5*60,
            change_filter=util.ChangeFilter(branch='master', project='archlinux', category='iso', codebase='archbuild'),
            builderNames=['archlinux-iso-build'],
        )
    )
    c['schedulers'].append(
        schedulers.Nightly(
            name='archlinux-iso-nightly',
            codebases=[
                util.CodebaseParameter(
                    codebase='archbuild',
                    label='Repository archbuild',
                    branch=util.FixedParameter(name='branch', default='master'),
                    repository=util.FixedParameter(name='repository', default='https://github.com/lirios/archbuild.git'),
                    revision=util.FixedParameter(name='revision', default=''),
                    project=util.FixedParameter(name='project', default='archlinux'),
                    category=util.FixedParameter(name='category', default='iso'),
                )
            ],
            builderNames=['archlinux-iso-build'],
            hour=0, minute=0,
        )
    )
    c['schedulers'].append(
        schedulers.ForceScheduler(
            name='archlinux-iso-force',
            buttonName='Force Rebuild',
            label='Force a rebuild',
            reason=util.StringParameter(
                name='reason',
                label='Reason:',
                required=True,
                default='Forced build',
                size=80,
            ),
            properties=[
                util.StringParameter(
                    name='buildname',
                    label='Build Name:',
                    required=False,
                ),
            ],
            codebases=[
                util.CodebaseParameter(
                    codebase='archbuild',
                    label='Repository archbuild',
                    branch=util.FixedParameter(name='branch', default='master'),
                    repository=util.FixedParameter(name='repository', default='https://github.com/lirios/archbuild.git'),
                    revision=util.FixedParameter(name='revision', default=''),
                    project=util.FixedParameter(name='project', default='archlinux'),
                    category=util.FixedParameter(name='category', default='iso'),
                )
            ],
            builderNames=['archlinux-iso-build'],
        )
    )

# Traditional image

c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name='traditional-iso-checkin',
        treeStableTimer=5*60,
        change_filter=util.ChangeFilter(branch='master', project='fedora', category='iso', codebase='kickstart'),
        builderNames=['traditional-iso-build'],
    )
)
c['schedulers'].append(
    schedulers.Nightly(
        name='traditional-iso-nightly',
        codebases=[
            util.CodebaseParameter(
                codebase='kickstart',
                label='Repository kickstart',
                branch=util.FixedParameter(name='branch', default='master'),
                repository=util.FixedParameter(name='repository', default='https://github.com/lirios/kickstart.git'),
                revision=util.FixedParameter(name='revision', default=''),
                project=util.FixedParameter(name='project', default='fedora'),
                category=util.FixedParameter(name='category', default='iso'),
            )
        ],
        builderNames=['traditional-iso-build'],
        hour=0, minute=0,
    )
)
c['schedulers'].append(
    schedulers.ForceScheduler(
        name='traditional-iso-force',
        buttonName='Force Rebuild',
        label='Force a rebuild',
        reason=util.StringParameter(
            name='reason',
            label='Reason:',
            required=True,
            default='Forced build',
            size=80,
        ),
        properties=[
            util.StringParameter(
                name='buildname',
                label='Build Name:',
                required=False,
            ),
            util.BooleanParameter(
                name='cache',
                label='Enable cache',
                default=True
            ),
        ],
        codebases=[
            util.CodebaseParameter(
                codebase='kickstart',
                label='Repository kickstart',
                branch=util.FixedParameter(name='branch', default='master'),
                repository=util.FixedParameter(name='repository', default='https://github.com/lirios/kickstart.git'),
                revision=util.FixedParameter(name='revision', default=''),
                project=util.FixedParameter(name='project', default='fedora'),
                category=util.FixedParameter(name='category', default='iso'),
            )
        ],
        builderNames=['traditional-iso-build'],
    )
)

# ostree

ostree_config_codebase_parameter = \
    util.CodebaseParameter(
        codebase='ostree-config',
        label='Repository ostree-config',
        branch=util.FixedParameter(name='branch', default='develop'),
        repository=util.FixedParameter(name='repository', default='https://github.com/lirios/ostree-config.git'),
        revision=util.FixedParameter(name='revision', default=''),
        project=util.FixedParameter(name='project', default='fedora'),
        category=util.FixedParameter(name='category', default='ostree'),
    )

c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name='ostreeo-checkin',
        treeStableTimer=5*60,
        change_filter=util.ChangeFilter(branch='develop', project='fedora', category='ostree', codebase='ostree-config'),
        builderNames=['ostree-unstable-x86_64-build'],
    )
)
c['schedulers'].append(
    schedulers.Nightly(
        name='ostree-nightly',
        codebases=[ostree_config_codebase_parameter],
        builderNames=['ostree-unstable-x86_64-build'],
        hour=2, minute=0,
    )
)
c['schedulers'].append(
    schedulers.ForceScheduler(
        name='ostree-force',
        buttonName='Force Rebuild',
        label='Force a rebuild',
        reason=util.StringParameter(
            name='reason',
            label='Reason:',
            required=True,
            default='Forced build',
            size=80,
        ),
        properties=[
            util.StringParameter(
                name='buildname',
                label='Build Name:',
                required=False,
            ),
        ],
        codebases=[ostree_config_codebase_parameter],
        builderNames=['ostree-unstable-x86_64-build'],
    )
)


# flatpak

c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name='flatpak-checkin',
        treeStableTimer=5*60,
        change_filter=util.ChangeFilter(branch='master', project='flatpak', codebase='flatpak'),
        builderNames=['flatpak-stable-build', 'flatpak-unstable-build'],
    )
)
c['schedulers'].append(
    schedulers.Nightly(
        name='flatpak-nightly',
        reason='Nightly build of Flatpak runtime and apps',
        codebases=[
            util.CodebaseParameter(
                codebase='flatpak',
                label='Flatpak',
                branch=util.FixedParameter(name='branch', default='master'),
                repository=util.FixedParameter(name='repository', default='https://github.com/lirios/flatpak.git'),
                revision=util.FixedParameter(name='revision', default=''),
                project=util.FixedParameter(name='project', default='flatpak'),
            )
        ],
        builderNames=['flatpak-stable-build', 'flatpak-unstable-build'],
        hour=4, minute=0
    )
)
c['schedulers'].append(
    schedulers.ForceScheduler(
        name='flatpak-stable-force',
        buttonName='Force Rebuild',
        label='Force a rebuild',
        reason=util.StringParameter(
            name='reason',
            label='Reason:',
            required=True,
            default='Forced build',
            size=80,
        ),
        properties=[
            util.StringParameter(
                name='buildname',
                label='Build Name:',
                required=False,
            ),
        ],
        codebases=[
            util.CodebaseParameter(
                codebase='flatpak',
                label='Flatpak',
                branch=util.FixedParameter(name='branch', default='master'),
                repository=util.FixedParameter(name='repository', default='https://github.com/lirios/flatpak.git'),
                revision=util.FixedParameter(name='revision', default=''),
                project=util.FixedParameter(name='project', default='flatpak'),
            )
        ],
        builderNames=['flatpak-stable-build'],
    )
)
c['schedulers'].append(
    schedulers.ForceScheduler(
        name='flatpak-unstable-force',
        buttonName='Force Rebuild',
        label='Force a rebuild',
        reason=util.StringParameter(
            name='reason',
            label='Reason:',
            required=True,
            default='Forced build',
            size=80,
        ),
        properties=[
            util.StringParameter(
                name='buildname',
                label='Build Name:',
                required=False,
            ),
        ],
        codebases=[
            util.CodebaseParameter(
                codebase='flatpak',
                label='Flatpak',
                branch=util.FixedParameter(name='branch', default='master'),
                repository=util.FixedParameter(name='repository', default='https://github.com/lirios/flatpak.git'),
                revision=util.FixedParameter(name='revision', default=''),
                project=util.FixedParameter(name='project', default='flatpak'),
            )
        ],
        builderNames=['flatpak-unstable-build'],
    )
)

####### Builders

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'].append(
    util.BuilderConfig(
        name='update-docker',
        workernames=workers['local'],
        factory=factories.DockerHubBuildFactory(triggers=config.docker_hub_triggers, tags=['automatic'])
    )
)
if is_archlinux_enabled is True:
    c['builders'].append(
        util.BuilderConfig(
            name='archlinux-build',
            workernames=workers['archlinux'],
            factory=factories.ArchPackagesBuildFactory(triggers=config.docker_hub_triggers)
        )
    )
    c['builders'].append(
        util.BuilderConfig(
            name='archlinux-iso-build',
            workernames=workers['archlinux'],
            factory=factories.ArchISOBuildFactory()
        )
    )
c['builders'].append(
    util.BuilderConfig(
        name='traditional-iso-build',
        workernames=workers['fedora'],
        factory=factories.ImageBuildFactory()
    )
)
c['builders'].append(
    util.BuilderConfig(
        name='ostree-unstable-x86_64-build',
        workernames=workers['fedora'],
        factory=factories.OSTreeFactory(channel='unstable', treename='desktop', arch='x86_64')
    )
)
c['builders'].append(
    util.BuilderConfig(
        name='flatpak-stable-build',
        workernames=workers['fedora'],
        factory=factories.FlatpakFactory(channel='stable', options=config.flatpak)
    )
)
c['builders'].append(
    util.BuilderConfig(
        name='flatpak-unstable-build',
        workernames=workers['fedora'],
        factory=factories.FlatpakFactory(channel='unstable', options=config.flatpak)
    )
)

####### Services

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

if config.slack_reporter.get('url'):
    def create_slack_config(build):
        # build object is defined here: http://docs.buildbot.net/latest/developer/rest.html#rtype-build
        if build.get('results', None) is None:
            return
        if build['results'] == buildbot.process.results.SUCCESS:
            status = 'Success'
            color = 'good'
        else:
            status = 'Failure'
            color = 'failure'
        message = 'New build for {project}\nStatus: *{status}*\nBuild details: {url}'.format(
            project=build['properties'].get('project')[0] or build['properties'].get('buildername')[0],
            status=status,
            url=build['url']
        )
        fields = []
        if build['properties'].get('repository', [])[0]:
            fields.append(dict(title='Repository', value=build['properties']['repository'][0], short=True))
        if build['properties'].get('branch', [])[0]:
            fields.append(dict(title='Branch', value=build['properties']['branch'][0], short=True))
        return dict(
            text=' ',
            attachments=[dict(
                fallback=message,
                text=message,
                color=color,
                mrkdwn_in=['text', 'title', 'fallback'],
                fields=fields,
            )]
        )

    c['services'].append(
        reporters.HttpStatusPush(config.slack_reporter['url'], wantProperties=True, format_fn=create_slack_config)
    )

####### Project Identity

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = 'Liri Builder'
c['titleURL'] = 'https://github.com/lirios/buildbot-config'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = config.buildbot_uri

c['www'] = dict(port=config.buildbot_port,
                plugins=dict(waterfall_view={}, console_view={}),
                authz=authz)
if auth:
    c['www']['auth'] = auth

####### Change Sources

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'].append(
    changes.GitPoller(
        repourl='https://github.com/lirios/packages.git',
        branches=['master'],
        project='archlinux',
        category='packages',
        pollAtLaunch=True,
        pollInterval=5*60,
        workdir='gitpoller/archlinux/packages',
    )
)
c['change_source'].append(
    changes.GitPoller(
        repourl='https://github.com/lirios/archbuild.git',
        branches=['master'],
        project='archlinux',
        category='iso',
        pollAtLaunch=True,
        pollInterval=5*60,
        workdir='gitpoller/archlinux/archbuild',
    )
)
c['change_source'].append(
    changes.GitPoller(
        repourl='https://github.com/lirios/kickstart.git',
        branches=['master'],
        project='fedora',
        category='iso',
        pollAtLaunch=True,
        pollInterval=5*60,
        workdir='gitpoller/fedora/kickstart',
    )
)
c['change_source'].append(
    changes.GitPoller(
        repourl='https://github.com/lirios/ostree-config.git',
        branches=['develop'],
        project='fedora',
        category='ostree',
        pollAtLaunch=True,
        pollInterval=5*60,
        workdir='gitpoller/fedora/ostree-config',
    )
)
c['change_source'].append(
    changes.GitPoller(
        repourl='https://github.com/lirios/flatpak.git',
        branches=['master'],
        project='flatpak',
        pollAtLaunch=True,
        pollInterval=5*60,
        workdir='gitpoller/flatpak/sources',
    )
)

####### Database URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}
