# -*- python -*-
# ex: set filetype=python:

from future.utils import iteritems
from future.utils import string_types
from buildbot.plugins import *
from buildbot.process import logobserver
from buildbot import locks
from buildbot.www.hooks.github import GitHubEventHandler

import buildbot
import datetime

from liribotcfg import configuration
from liribotcfg import factories

config = configuration.Configuration()

###### Initialization

c = BuildmasterConfig = {}
c['change_source'] = []
c['protocols'] = {}
c['workers'] = []
c['schedulers'] = []
c['builders'] = []
c['services'] = []
c['buildbotNetUsageData'] = None

####### Authentication

auth = None
allow_rules = []
role_matchers = []
admins_role = 'admins'

if config.admin_username != '' and config.admin_password != '':
    auth = util.UserPasswordAuth({config.admin_username: config.admin_password})
    allow_rules = [
        util.RebuildBuildEndpointMatcher(role=admins_role, defaultDeny=True),
        util.StopBuildEndpointMatcher(role=admins_role, defaultDeny=True),
        util.ForceBuildEndpointMatcher(role=admins_role, defaultDeny=True),
        util.EnableSchedulerEndpointMatcher(role=admins_role, defaultDeny=True)
    ]
    role_matchers.append(util.RolesFromEmails(admins=[config.admin_username]))
elif config.github_auth_client != '' and config.github_auth_secret != '':
    auth = util.GitHubAuth(config.github_auth_client, config.github_auth_secret, apiVersion=4, getTeamsMembership=True)
    admins_role = 'buildbot'
    allow_rules = [
        util.AnyEndpointMatcher(role=admins_role),
        util.AnyControlEndpointMatcher(role=admins_role)
    ]
    role_matchers.append(util.RolesFromGroups(groupPrefix='lirios/'))

authz = util.Authz(
    allowRules=allow_rules,
    roleMatchers=role_matchers
)

c['protocols']['pb'] = {'port': 9989}

####### Setup

# configure a janitor which will delete all logs older than one month,
# and will run on sundays at noon
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=datetime.timedelta(weeks=4),
    hour=12,
    dayOfWeek=6
)]

####### Workers

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

# For whatever reason, max-builds doesn't seem to work, so we only ever run one build.
# To hack around this we create multiple master workers
local_workers = []
for i in range(1, config.num_master_workers + 1):
    name = 'MasterWorker%d' % i
    c['workers'].append(worker.LocalWorker(name))
    local_workers.append(name)

# Docker workers to build ArchLinux packages and ISOs,
# for hostconfig see https://docker-py.readthedocs.io/en/stable/api.html#docker.api.container.ContainerApiMixin.create_host_config
c['workers'].append(
    worker.DockerLatentWorker(
        'ArchLinuxWorker1', None,
        docker_host='unix://var/run/docker.sock',
        image='liridev/buildbot-archlinux',
        followStartupLogs=True,
        autopull=True,
        alwaysPull=True,
        volumes=[
            '/srv/www/repo.liri.io/archlinux/unstable/x86_64:/repo',
            '/srv/ci/buildbot/workers/ArchLinuxWorker1:/build',
        ],
        hostconfig={
            'links': {
                'buildbot-master': 'bm',
            },
        },
    )
)
c['workers'].append(
    worker.DockerLatentWorker(
        'ArchISOWorker1', None,
        docker_host='unix://var/run/docker.sock',
        image='liridev/buildbot-archlinux',
        followStartupLogs=True,
        autopull=True,
        alwaysPull=True,
        volumes=[
            '/srv/www/repo.liri.io:/repo',
        ],
        hostconfig={
            'privileged': True,
            'links': {
                'buildbot-master': 'bm',
            },
        },
    )
)

####### Schedulers

c['schedulers'].append(
    schedulers.Periodic(
        name='update-docker',
        reason='Perioding rebuild of the CI container images',
        builderNames=['update-docker'],
        periodicBuildTimer=24*60*60,
    )
)
c['schedulers'].append(
    schedulers.ForceScheduler(
        name='update-docker-force',
        buttonName='Force Rebuild',
        label='Force a rebuild',
        reason=util.StringParameter(
            name='reason',
            label='Reason:',
            required=True,
            default='Forced build',
            size=80,
        ),
        properties=[
            util.StringParameter(
                name='buildname',
                label='Build Name:',
                required=False,
            ),
        ],
        builderNames=['update-docker'],
    )
)

c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name='archlinux-checkin',
        treeStableTimer=5*60,
        change_filter=util.ChangeFilter(branch='master', project='archlinux'),
        builderNames=['archlinux-build'],
    )
)
c['schedulers'].append(
    schedulers.ForceScheduler(
        name='archlinux-force',
        buttonName='Force Rebuild',
        label='Force a rebuild',
        reason=util.StringParameter(
            name='reason',
            label='Reason:',
            required=True,
            default='Forced build',
            size=80,
        ),
        properties=[
            util.StringParameter(
                name='buildname',
                label='Build Name:',
                required=False,
            ),
        ],
        codebases=[
            util.CodebaseParameter(
                '',
                label='Main repository',
                branch='master',
                repository='https://github.com/lirios/packages.git',
                revision='',
                project='archlinux',
                category='packages',
            )
        ],
        builderNames=['archlinux-build'],
    )
)


c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name='archlinux-iso-checkin',
        treeStableTimer=5*60,
        change_filter=util.ChangeFilter(branch='master', project='archlinux'),
        builderNames=['archlinux-iso-build'],
    )
)
c['schedulers'].append(
    schedulers.Nightly(
        name='archlinux-iso-nightly',
        branch='master',
        builderNames=['archlinux-iso-build'],
        hour=0, minute=0,
    )
)
c['schedulers'].append(
    schedulers.ForceScheduler(
        name='archlinux-iso-force',
        buttonName='Force Rebuild',
        label='Force a rebuild',
        reason=util.StringParameter(
            name='reason',
            label='Reason:',
            required=True,
            default='Forced build',
            size=80,
        ),
        properties=[
            util.StringParameter(
                name='buildname',
                label='Build Name:',
                required=False,
            ),
        ],
        codebases=[
            util.CodebaseParameter(
                '',
                label='Main repository',
                branch='master',
                repository='https://github.com/lirios/archbuild.git',
                revision='',
                project='archlinux',
                category='iso',
            )
        ],
        builderNames=['archlinux-iso-build'],
    )
)

####### Builders

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'].append(
    util.BuilderConfig(
        name='update-docker',
        workernames=local_workers,
        factory=factories.DockerHubBuildFactory(triggers=config.docker_hub_triggers, tags=['automatic'])
    )
)
c['builders'].append(
    util.BuilderConfig(
        name='archlinux-build',
        workernames=['ArchLinuxWorker1'],
        factory=factories.ArchPackagesBuildFactory()
    )
)
c['builders'].append(
    util.BuilderConfig(
        name='archlinux-iso-build',
        workernames=['ArchISOWorker1'],
        factory=factories.ArchISOBuildFactory()
    )
)

####### Services

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

if config.slack_reporter.get('url'):
    def create_slack_config(build):
        # build object is defined here: http://docs.buildbot.net/latest/developer/rest.html#rtype-build
        if build.get('results', None) is None:
            return
        if build['results'] == buildbot.process.results.SUCCESS:
            status = 'Success'
            color = 'good'
        else:
            status = 'Failure'
            color = 'failure'
        message = 'New build for {project}\nStatus: *{status}*\nBuild details: {url}'.format(
            project=build['properties'].get('project')[0] or build['properties'].get('buildername')[0],
            status=status,
            url=build['url']
        )
        fields = []
        if build['properties'].get('repository', [])[0]:
            fields.append(dict(title='Repository', value=build['properties']['repository'], short=True))
        if build['properties'].get('branch', [])[0]:
            fields.append(dict(title='Branch', value=build['properties']['branch'], short=True))
        return dict(
            text=' ',
            attachments=[dict(
                fallback=message,
                text=message,
                color=color,
                mrkdwn_in=['text', 'title', 'fallback'],
                fields=fields,
            )]
        )

    c['services'].append(
        reporters.HttpStatusPush(config.slack_reporter['url'], wantProperties=True, format_fn=create_slack_config)
    )

####### Project Identity

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = 'Liri Builder'
c['titleURL'] = 'https://github.com/lirios/builder'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = config.buildbot_uri

c['www'] = dict(port=config.buildbot_port,
                plugins=dict(waterfall_view={}, console_view={}),
                authz=authz)
if auth:
    c['www']['auth'] = auth

####### Change Sources

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'].append(
    changes.GitPoller(
        repourl='https://github.com/lirios/packages.git',
        branches=['master'],
        project='archlinux',
        category='packages',
        pollAtLaunch=True,
        pollInterval=5*60,
        workdir='gitpoller/archlinux/packages',
    )
)
c['change_source'].append(
    changes.GitPoller(
        repourl='https://github.com/lirios/archbuild.git',
        branches=['master'],
        project='archlinux',
        category='iso',
        pollAtLaunch=True,
        pollInterval=5*60,
        workdir='gitpoller/archlinux/archbuild',
    )
)

####### Database URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}
